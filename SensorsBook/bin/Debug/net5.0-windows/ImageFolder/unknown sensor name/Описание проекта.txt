Десктопное приложение с GUI выполненным при помощи WPF.
Проклятые, но удобные и функциональные байндинги.
Основа проекта - базы данных.
Задача приложения - считывать из них информацию, или заносить ее туда.
Удаленная база данных MySQL, к ней обращаются приложения, каждому из которых приваивается user login
и пароль, с ограничением возможностей при необходимости.
Приложение имеет локальную базу данных SQLite.
После запуска приложение обращается в удаленную базу данных, сверяет сохраненную у себя дату
последних изменений с датой в удаленной базе.
Это, наверное, отдельная или таблица, или колонка, или не определился еще.
Если даты отличаются, то скачивает себе (изменения, всю базу, архив pornhub, тоже еще не
определился).
Ссылки на картинки хранятся в базе данных.
Приложение скачивает себе картинки из удаленной папки на сервере с общей базой и создает себе 
свои ссылки на скопированные изображения в своей локальной базе данных.

Приложение по сути - коллекция коллекций.
Коллекции создаются и отображаются динамически в зависимости от записей в базе данных.
Байндинг, итить его...

таблица (коллекция) имеет дополнительную графу для идентификации датчика.
Выборка из таблицы идет по этой графе.

Объекты (таблицы БД):

1. карточка датчика:
 - название
 - описание
 - коллекция изображений:
	- внешний вид
	- схема подключений
	- варианты монтажа и пр.
Прокрутка изображений, показ полноразмерного при клике.
 - коллекция характеристик (ключ - значение?)
 - коллекция связанных аксессуаров
 - коллекция аналогов

/*SensorCardCharactModel (хар-ко, значение, имя датчика)*/
/*SensorCardImagesModel (путь к рисунку, имя датчика) */



2. коллекция типов датчиков:
 - название коллекции
 - коллекция карточек датчиков
При клике на название коллекции показывать коллекцию названий датчиков выбранного типа.
При клике на название датчика показывать карточку датчика.

3. страница ввода нового или редактирования существующего датчика.

4. страница настроек: логин, пароль, адрес/строка подключения базы данных.


